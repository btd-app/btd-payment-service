syntax = "proto3";

package btd.payment;

// Payment Service - gRPC definitions for payment and subscription operations
service PaymentService {
  // Subscription Management
  rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse);
  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (UpdateSubscriptionResponse);
  rpc CancelSubscription(CancelSubscriptionRequest) returns (CancelSubscriptionResponse);
  rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse);
  rpc GetUserSubscriptions(GetUserSubscriptionsRequest) returns (GetUserSubscriptionsResponse);
  
  // Payment Processing
  rpc ProcessPayment(ProcessPaymentRequest) returns (ProcessPaymentResponse);
  rpc RefundPayment(RefundPaymentRequest) returns (RefundPaymentResponse);
  rpc GetPaymentHistory(GetPaymentHistoryRequest) returns (GetPaymentHistoryResponse);
  
  // Payment Methods
  rpc AddPaymentMethod(AddPaymentMethodRequest) returns (AddPaymentMethodResponse);
  rpc RemovePaymentMethod(RemovePaymentMethodRequest) returns (RemovePaymentMethodResponse);
  rpc GetPaymentMethods(GetPaymentMethodsRequest) returns (GetPaymentMethodsResponse);
  rpc SetDefaultPaymentMethod(SetDefaultPaymentMethodRequest) returns (SetDefaultPaymentMethodResponse);
  
  // Billing
  rpc GetInvoices(GetInvoicesRequest) returns (GetInvoicesResponse);
  rpc GetUpcomingInvoice(GetUpcomingInvoiceRequest) returns (GetUpcomingInvoiceResponse);
  
  // Pricing
  rpc GetPricingPlans(GetPricingPlansRequest) returns (GetPricingPlansResponse);
  rpc ValidatePromoCode(ValidatePromoCodeRequest) returns (ValidatePromoCodeResponse);
  
  // Webhooks
  rpc ProcessStripeWebhook(ProcessStripeWebhookRequest) returns (ProcessStripeWebhookResponse);
  
  // Health
  rpc GetPaymentHealth(GetPaymentHealthRequest) returns (GetPaymentHealthResponse);
  
  // Stream payment events
  rpc StreamPaymentEvents(StreamPaymentEventsRequest) returns (stream PaymentEvent);
}

// Request/Response Messages

// Subscription Management
message CreateSubscriptionRequest {
  string user_id = 1;
  string plan_id = 2;
  string payment_method_id = 3;
  string promo_code = 4;
  map<string, string> metadata = 5;
}

message CreateSubscriptionResponse {
  Subscription subscription = 1;
  string client_secret = 2; // For 3D Secure authentication if needed
  bool requires_action = 3;
}

message UpdateSubscriptionRequest {
  string subscription_id = 1;
  string user_id = 2;
  string new_plan_id = 3;
  bool prorate = 4;
  string effective_date = 5; // ISO date string
}

message UpdateSubscriptionResponse {
  Subscription subscription = 1;
  float proration_amount = 2;
}

message CancelSubscriptionRequest {
  string subscription_id = 1;
  string user_id = 2;
  bool cancel_immediately = 3;
  string cancellation_reason = 4;
  string feedback = 5;
}

message CancelSubscriptionResponse {
  bool success = 1;
  string cancelled_at = 2;
  string ends_at = 3;
}

message GetSubscriptionRequest {
  string subscription_id = 1;
  string user_id = 2;
}

message GetSubscriptionResponse {
  Subscription subscription = 1;
}

message GetUserSubscriptionsRequest {
  string user_id = 1;
  bool include_cancelled = 2;
  int32 limit = 3;
  string starting_after = 4;
}

message GetUserSubscriptionsResponse {
  repeated Subscription subscriptions = 1;
  bool has_more = 2;
}

// Payment Processing
message ProcessPaymentRequest {
  string user_id = 1;
  float amount = 2;
  string currency = 3;
  string payment_method_id = 4;
  string description = 5;
  map<string, string> metadata = 6;
  bool save_payment_method = 7;
}

message ProcessPaymentResponse {
  Payment payment = 1;
  string client_secret = 2;
  bool requires_action = 3;
  string error = 4;
}

message RefundPaymentRequest {
  string payment_id = 1;
  string user_id = 2;
  float amount = 3; // Optional, full refund if not specified
  string reason = 4;
}

message RefundPaymentResponse {
  Refund refund = 1;
  bool success = 2;
  string error = 3;
}

message GetPaymentHistoryRequest {
  string user_id = 1;
  int32 limit = 2;
  string starting_after = 3;
  string ending_before = 4;
}

message GetPaymentHistoryResponse {
  repeated Payment payments = 1;
  bool has_more = 2;
}

// Payment Methods
message AddPaymentMethodRequest {
  string user_id = 1;
  string payment_method_id = 2; // Stripe payment method ID
  bool set_as_default = 3;
}

message AddPaymentMethodResponse {
  PaymentMethod payment_method = 1;
  bool success = 2;
  string error = 3;
}

message RemovePaymentMethodRequest {
  string payment_method_id = 1;
  string user_id = 2;
}

message RemovePaymentMethodResponse {
  bool success = 1;
  string message = 2;
}

message GetPaymentMethodsRequest {
  string user_id = 1;
  string type = 2; // card, bank_account, etc.
}

message GetPaymentMethodsResponse {
  repeated PaymentMethod payment_methods = 1;
  string default_payment_method_id = 2;
}

message SetDefaultPaymentMethodRequest {
  string user_id = 1;
  string payment_method_id = 2;
}

message SetDefaultPaymentMethodResponse {
  bool success = 1;
  PaymentMethod payment_method = 2;
}

// Billing
message GetInvoicesRequest {
  string user_id = 1;
  int32 limit = 2;
  string starting_after = 3;
}

message GetInvoicesResponse {
  repeated Invoice invoices = 1;
  bool has_more = 2;
}

message GetUpcomingInvoiceRequest {
  string user_id = 1;
  string subscription_id = 2;
}

message GetUpcomingInvoiceResponse {
  Invoice invoice = 1;
  bool exists = 2;
}

// Pricing
message GetPricingPlansRequest {
  string currency = 1;
  bool include_trial_info = 2;
  string user_tier = 3; // For tier-specific pricing
}

message GetPricingPlansResponse {
  repeated PricingPlan plans = 1;
  string currency = 2;
}

message ValidatePromoCodeRequest {
  string promo_code = 1;
  string user_id = 2;
  string plan_id = 3;
}

message ValidatePromoCodeResponse {
  bool valid = 1;
  float discount_amount = 2;
  float discount_percentage = 3;
  string expires_at = 4;
  string error = 5;
}

// Webhooks
message ProcessStripeWebhookRequest {
  string event_type = 1;
  string event_id = 2;
  bytes payload = 3;
  string signature = 4;
}

message ProcessStripeWebhookResponse {
  bool processed = 1;
  string message = 2;
  string error = 3;
}

// Health
message GetPaymentHealthRequest {
  bool include_stripe_status = 1;
  bool include_metrics = 2;
}

message GetPaymentHealthResponse {
  bool healthy = 1;
  StripeStatus stripe_status = 2;
  PaymentMetrics metrics = 3;
  string timestamp = 4;
}

// Streaming
message StreamPaymentEventsRequest {
  string service_id = 1;
  repeated string event_types = 2;
  string user_id = 3; // Optional: filter by user
}

// Shared message types
message Subscription {
  string id = 1;
  string user_id = 2;
  string plan_id = 3;
  string status = 4; // active, cancelled, past_due, etc.
  float amount = 5;
  string currency = 6;
  string interval = 7; // month, year
  string current_period_start = 8;
  string current_period_end = 9;
  string created_at = 10;
  string cancelled_at = 11;
  string ends_at = 12;
  map<string, string> metadata = 13;
  repeated string feature_flags = 14;
}

message Payment {
  string id = 1;
  string user_id = 2;
  float amount = 3;
  string currency = 4;
  string status = 5; // succeeded, pending, failed
  string description = 6;
  string payment_method_id = 7;
  string created_at = 8;
  map<string, string> metadata = 9;
  string invoice_id = 10;
  string subscription_id = 11;
}

message Refund {
  string id = 1;
  string payment_id = 2;
  float amount = 3;
  string currency = 4;
  string status = 5;
  string reason = 6;
  string created_at = 7;
}

message PaymentMethod {
  string id = 1;
  string type = 2; // card, bank_account
  CardDetails card = 3;
  string created_at = 4;
  bool is_default = 5;
  string billing_email = 6;
}

message CardDetails {
  string brand = 1; // visa, mastercard, etc.
  string last4 = 2;
  int32 exp_month = 3;
  int32 exp_year = 4;
  string funding = 5; // credit, debit
}

message Invoice {
  string id = 1;
  string subscription_id = 2;
  float amount_due = 3;
  float amount_paid = 4;
  string currency = 5;
  string status = 6; // draft, open, paid, void
  string due_date = 7;
  string period_start = 8;
  string period_end = 9;
  repeated InvoiceLineItem line_items = 10;
  string pdf_url = 11;
}

message InvoiceLineItem {
  string description = 1;
  float amount = 2;
  int32 quantity = 3;
  string period_start = 4;
  string period_end = 5;
}

message PricingPlan {
  string id = 1;
  string name = 2;
  string tier = 3; // DISCOVER, CONNECT, COMMUNITY
  float monthly_price = 4;
  float yearly_price = 5;
  string currency = 6;
  repeated string features = 7;
  map<string, int32> limits = 8;
  bool has_trial = 9;
  int32 trial_days = 10;
  string stripe_monthly_price_id = 11;
  string stripe_yearly_price_id = 12;
}

message StripeStatus {
  bool connected = 1;
  string mode = 2; // test, live
  int32 webhook_endpoints_active = 3;
  string last_webhook_at = 4;
}

message PaymentMetrics {
  int64 total_transactions = 1;
  int64 successful_transactions = 2;
  int64 failed_transactions = 3;
  float total_revenue = 4;
  int64 active_subscriptions = 5;
  float mrr = 6; // Monthly Recurring Revenue
  map<string, int64> transactions_by_type = 7;
}

message PaymentEvent {
  string event_id = 1;
  string event_type = 2; // payment_succeeded, subscription_created, etc.
  string user_id = 3;
  map<string, string> data = 4;
  string timestamp = 5;
  string source = 6; // stripe, manual, system
}