generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum SubscriptionTier {
  DISCOVER
  CONNECT
  COMMUNITY
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  BILLING_RETRY
  PENDING
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}

model Subscription {
  id                          String    @id @default(uuid())
  userId                      String    @unique @map("user_id")
  subscriptionTier            SubscriptionTier @default(DISCOVER) @map("subscription_tier")
  status                      SubscriptionStatus @default(PENDING)

  // Stripe specific fields
  stripeCustomerId            String?   @map("stripe_customer_id")
  stripeSubscriptionId        String?   @unique @map("stripe_subscription_id")
  planId                      String?   @map("plan_id")

  // Apple specific fields
  appleProductId              String?   @map("apple_product_id")
  appleTransactionId          String?   @unique @map("apple_transaction_id")
  appleOriginalTransactionId  String?   @map("apple_original_transaction_id")

  // Dates (matching TypeScript code expectations)
  currentPeriodStart          DateTime  @map("current_period_start")
  currentPeriodEnd            DateTime  @map("current_period_end")
  cancelledAt                 DateTime? @map("cancelled_at")
  lastRenewedAt               DateTime? @map("last_renewed_at")
  trialEnd                    DateTime? @map("trial_end")

  // Settings
  autoRenew                   Boolean   @default(true) @map("auto_renew")
  cancelAtPeriodEnd           Boolean   @default(false) @map("cancel_at_period_end")
  isTrial                     Boolean   @default(false) @map("is_trial")
  isIntroOffer                Boolean   @default(false) @map("is_intro_offer")

  createdAt                   DateTime  @default(now()) @map("created_at")
  updatedAt                   DateTime  @updatedAt @map("updated_at")

  @@index([userId, status])
  @@index([currentPeriodEnd])
  @@index([appleOriginalTransactionId])
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
  @@map("subscriptions")
}

model AppleTransaction {
  id                    String    @id @default(uuid())
  userId                String    @map("user_id")
  transactionId         String    @unique @map("transaction_id")
  originalTransactionId String?   @map("original_transaction_id")
  productId             String    @map("product_id")
  type                  String    // subscription, consumable
  amount                Decimal?  @db.Decimal(10, 2)
  currency              String?
  status                String?   // completed, refunded, failed
  processedAt           DateTime? @map("processed_at")
  createdAt             DateTime  @default(now()) @map("created_at")

  @@index([userId])
  @@index([originalTransactionId])
  @@map("apple_transactions")
}

model UserPremiumFeatures {
  userId                String    @id @map("user_id")
  boostsRemaining       Int       @default(0) @map("boosts_remaining")
  superLikesRemaining   Int       @default(0) @map("super_likes_remaining")
  dailySuperLikesUsed   Int       @default(0) @map("daily_super_likes_used")
  dailyLikesUsed        Int       @default(0) @map("daily_likes_used")
  lastResetAt           DateTime  @default(now()) @map("last_reset_at")

  // Feature flags
  unlimitedLikes        Boolean   @default(false) @map("unlimited_likes")
  whoLikedMe            Boolean   @default(false) @map("who_liked_me")
  topPicks              Boolean   @default(false) @map("top_picks")
  rewind                Boolean   @default(false) @map("rewind")
  passport              Boolean   @default(false) @map("passport")
  incognito             Boolean   @default(false) @map("incognito")

  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  @@map("user_premium_features")
}

model AppleWebhookLog {
  id                String    @id @default(uuid())
  notificationType  String    @map("notification_type")
  signedPayload     String    @map("signed_payload") @db.Text
  processedAt       DateTime? @map("processed_at")
  status            String    // processed, failed, ignored
  errorMessage      String?   @map("error_message")
  createdAt         DateTime  @default(now()) @map("created_at")

  @@index([notificationType])
  @@index([createdAt])
  @@map("apple_webhook_logs")
}

model SubscriptionPlan {
  id             String           @id
  name           String
  tier           SubscriptionTier // DISCOVER, CONNECT, COMMUNITY
  duration       String           // monthly, annual
  price          Decimal          @db.Decimal(10, 2)
  currency       String           @default("USD")
  features       Json             // Array of feature objects
  stripePriceId  String?          @unique @map("stripe_price_id")
  stripeProductId String?         @unique @map("stripe_product_id")
  appleProductId String?          @unique @map("apple_product_id")
  isActive       Boolean          @default(true) @map("is_active")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  @@index([tier, duration])
  @@map("subscription_plans")
}

// Additional models needed by the code
model WebhookEvent {
  id            String   @id @default(uuid())
  eventId       String   @unique @map("event_id")
  stripeEventId String   @unique @map("stripe_event_id")
  type          String
  data          Json
  processed     Boolean  @default(false)
  status        String   @default("pending") // pending, processed, failed
  processedAt   DateTime? @map("processed_at")
  error         String?
  createdAt     DateTime @default(now()) @map("created_at")

  @@index([type])
  @@index([processed])
  @@map("webhook_events")
}

model BillingHistory {
  id              String        @id @default(uuid())
  userId          String        @map("user_id")
  stripeInvoiceId String?       @unique @map("stripe_invoice_id")
  type            String        // subscription_payment, one_time_purchase
  amount          Decimal       @db.Decimal(10, 2)
  currency        String
  description     String
  status          InvoiceStatus
  referenceId     String?       @map("reference_id")
  periodStart     DateTime?     @map("period_start")
  periodEnd       DateTime?     @map("period_end")
  invoiceUrl      String?       @map("invoice_url")
  pdfUrl          String?       @map("pdf_url")
  createdAt       DateTime      @default(now()) @map("created_at")

  @@index([userId])
  @@map("billing_history")
}

model PaymentIntent {
  id                      String        @id @default(uuid())
  userId                  String        @map("user_id")
  stripePaymentIntentId   String        @unique @map("stripe_payment_intent_id")
  amount                  Decimal       @db.Decimal(10, 2)
  currency                String
  status                  PaymentStatus
  description             String?
  metadata                Json?
  createdAt               DateTime      @default(now()) @map("created_at")
  updatedAt               DateTime      @updatedAt @map("updated_at")

  @@index([userId])
  @@map("payment_intents")
}

model PaymentMethod {
  id                      String   @id @default(uuid())
  userId                  String   @map("user_id")
  stripePaymentMethodId   String   @unique @map("stripe_payment_method_id")
  type                    String   // card, apple_pay, google_pay
  last4                   String?
  brand                   String?
  expiryMonth             Int?     @map("expiry_month")
  expiryYear              Int?     @map("expiry_year")
  isDefault               Boolean  @default(false) @map("is_default")
  createdAt               DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@map("payment_methods")
}

model FeatureUsage {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  feature   String
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([feature])
  @@map("feature_usage")
}